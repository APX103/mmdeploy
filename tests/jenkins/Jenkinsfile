pipeline {
    agent { label 'deploy_linux' }
    parameters {
        string(
            name: 'CONFIG',
            defaultValue: 'default.config',
            description: 'select config'
        )
        booleanParam(
            name: 'EXEC_BUILD',
            defaultValue: true,
        )
        booleanParam(
            name: 'EXEC_PREBUILD',
            defaultValue: true,
        )
        booleanParam(
            name: 'EXEC_CONVERT',
            defaultValue: true,
        )
        booleanParam(
            name: 'EXEC_UNITTEST',
            defaultValue: true,
        )

    }

    stages {
        stage('Regression') {
            parallel {
                stage('Build') {
                    agent { label 'deploy_linux' }
                    when {
                        expression { return params.EXEC_BUILD }
                    }
                    steps {
                        sh "tests/jenkins/scripts/test_build.sh '${params.CONFIG}'"
                    }
                }

                stage('Convert') {
                    agent { label 'deploy_linux' }
                    when {
                        expression { return params.EXEC_CONVERT }
                    }
                    steps {
                        sh "tests/jenkins/scripts/test_convert.sh '${params.CONFIG}'"
                    }
                }

                stage('Prebuild') {
                    agent { label 'deploy_linux' }
                    when {
                        expression { return params.EXEC_PREBUILD }
                    }
                    steps {
                        sh "tests/jenkins/scripts/test_prebuild.sh '${params.CONFIG}'"
                    }
                }

                stage('Unittest') {
                    agent { label 'deploy_linux' }
                    when {
                        expression { return params.EXEC_UNITTEST }
                    }
                    steps {
                        sh "tests/jenkins/scripts/test_ut.sh '${params.CONFIG}'"
                    }
                }
            }
        }

    }
}
